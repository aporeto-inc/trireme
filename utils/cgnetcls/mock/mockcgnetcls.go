// Code generated by MockGen. DO NOT EDIT.
// Source: cgnetcls/interfaces.go

// Package mockcgnetcls is a generated GoMock package.
package mockcgnetcls

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCgroupnetcls is a mock of Cgroupnetcls interface
// nolint
type MockCgroupnetcls struct {
	ctrl     *gomock.Controller
	recorder *MockCgroupnetclsMockRecorder
}

// MockCgroupnetclsMockRecorder is the mock recorder for MockCgroupnetcls
// nolint
type MockCgroupnetclsMockRecorder struct {
	mock *MockCgroupnetcls
}

// NewMockCgroupnetcls creates a new mock instance
// nolint
func NewMockCgroupnetcls(ctrl *gomock.Controller) *MockCgroupnetcls {
	mock := &MockCgroupnetcls{ctrl: ctrl}
	mock.recorder = &MockCgroupnetclsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockCgroupnetcls) EXPECT() *MockCgroupnetclsMockRecorder {
	return m.recorder
}

// Creategroup mocks base method
// nolint
func (m *MockCgroupnetcls) Creategroup(cgroupname string) error {
	ret := m.ctrl.Call(m, "Creategroup", cgroupname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Creategroup indicates an expected call of Creategroup
// nolint
func (mr *MockCgroupnetclsMockRecorder) Creategroup(cgroupname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creategroup", reflect.TypeOf((*MockCgroupnetcls)(nil).Creategroup), cgroupname)
}

// AssignMark mocks base method
// nolint
func (m *MockCgroupnetcls) AssignMark(cgroupname string, mark uint64) error {
	ret := m.ctrl.Call(m, "AssignMark", cgroupname, mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignMark indicates an expected call of AssignMark
// nolint
func (mr *MockCgroupnetclsMockRecorder) AssignMark(cgroupname, mark interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignMark", reflect.TypeOf((*MockCgroupnetcls)(nil).AssignMark), cgroupname, mark)
}

// AddProcess mocks base method
// nolint
func (m *MockCgroupnetcls) AddProcess(cgroupname string, pid int) error {
	ret := m.ctrl.Call(m, "AddProcess", cgroupname, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcess indicates an expected call of AddProcess
// nolint
func (mr *MockCgroupnetclsMockRecorder) AddProcess(cgroupname, pid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcess", reflect.TypeOf((*MockCgroupnetcls)(nil).AddProcess), cgroupname, pid)
}

// RemoveProcess mocks base method
// nolint
func (m *MockCgroupnetcls) RemoveProcess(cgroupname string, pid int) error {
	ret := m.ctrl.Call(m, "RemoveProcess", cgroupname, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcess indicates an expected call of RemoveProcess
// nolint
func (mr *MockCgroupnetclsMockRecorder) RemoveProcess(cgroupname, pid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcess", reflect.TypeOf((*MockCgroupnetcls)(nil).RemoveProcess), cgroupname, pid)
}

// DeleteCgroup mocks base method
// nolint
func (m *MockCgroupnetcls) DeleteCgroup(cgroupname string) error {
	ret := m.ctrl.Call(m, "DeleteCgroup", cgroupname)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCgroup indicates an expected call of DeleteCgroup
// nolint
func (mr *MockCgroupnetclsMockRecorder) DeleteCgroup(cgroupname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCgroup", reflect.TypeOf((*MockCgroupnetcls)(nil).DeleteCgroup), cgroupname)
}

// Deletebasepath mocks base method
// nolint
func (m *MockCgroupnetcls) Deletebasepath(contextID string) bool {
	ret := m.ctrl.Call(m, "Deletebasepath", contextID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deletebasepath indicates an expected call of Deletebasepath
// nolint
func (mr *MockCgroupnetclsMockRecorder) Deletebasepath(contextID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deletebasepath", reflect.TypeOf((*MockCgroupnetcls)(nil).Deletebasepath), contextID)
}
