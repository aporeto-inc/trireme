// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/interfaces.go

// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	reflect "reflect"

	eventinfo "github.com/aporeto-inc/trireme-lib/monitor/eventinfo"
	policy "github.com/aporeto-inc/trireme-lib/policy"
	gomock "github.com/golang/mock/gomock"
)

// MockMonitor is a mock of Monitor interface
// nolint
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor
// nolint
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance
// nolint
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// SetupHandlers mocks base method
// nolint
func (m *MockMonitor) SetupHandlers(puHandler ProcessingUnitsHandler, syncHandler SynchronizationHandler) {
	m.ctrl.Call(m, "SetupHandlers", puHandler, syncHandler)
}

// SetupHandlers indicates an expected call of SetupHandlers
// nolint
func (mr *MockMonitorMockRecorder) SetupHandlers(puHandler, syncHandler interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHandlers", reflect.TypeOf((*MockMonitor)(nil).SetupHandlers), puHandler, syncHandler)
}

// Start mocks base method
// nolint
func (m *MockMonitor) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockMonitorMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMonitor)(nil).Start))
}

// Stop mocks base method
// nolint
func (m *MockMonitor) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockMonitorMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMonitor)(nil).Stop))
}

// MockEventProcessor is a mock of EventProcessor interface
// nolint
type MockEventProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockEventProcessorMockRecorder
}

// MockEventProcessorMockRecorder is the mock recorder for MockEventProcessor
// nolint
type MockEventProcessorMockRecorder struct {
	mock *MockEventProcessor
}

// NewMockEventProcessor creates a new mock instance
// nolint
func NewMockEventProcessor(ctrl *gomock.Controller) *MockEventProcessor {
	mock := &MockEventProcessor{ctrl: ctrl}
	mock.recorder = &MockEventProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockEventProcessor) EXPECT() *MockEventProcessorMockRecorder {
	return m.recorder
}

// Start mocks base method
// nolint
func (m *MockEventProcessor) Start(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Start", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockEventProcessorMockRecorder) Start(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventProcessor)(nil).Start), eventInfo)
}

// Stop mocks base method
// nolint
func (m *MockEventProcessor) Stop(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Stop", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockEventProcessorMockRecorder) Stop(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEventProcessor)(nil).Stop), eventInfo)
}

// Create mocks base method
// nolint
func (m *MockEventProcessor) Create(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Create", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
// nolint
func (mr *MockEventProcessorMockRecorder) Create(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventProcessor)(nil).Create), eventInfo)
}

// Destroy mocks base method
// nolint
func (m *MockEventProcessor) Destroy(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Destroy", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
// nolint
func (mr *MockEventProcessorMockRecorder) Destroy(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockEventProcessor)(nil).Destroy), eventInfo)
}

// Pause mocks base method
// nolint
func (m *MockEventProcessor) Pause(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Pause", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
// nolint
func (mr *MockEventProcessorMockRecorder) Pause(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockEventProcessor)(nil).Pause), eventInfo)
}

// ReSync mocks base method
// nolint
func (m *MockEventProcessor) ReSync(EventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "ReSync", EventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReSync indicates an expected call of ReSync
// nolint
func (mr *MockEventProcessorMockRecorder) ReSync(EventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReSync", reflect.TypeOf((*MockEventProcessor)(nil).ReSync), EventInfo)
}

// MockEventProcessorMonitor is a mock of EventProcessorMonitor interface
// nolint
type MockEventProcessorMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockEventProcessorMonitorMockRecorder
}

// MockEventProcessorMonitorMockRecorder is the mock recorder for MockEventProcessorMonitor
// nolint
type MockEventProcessorMonitorMockRecorder struct {
	mock *MockEventProcessorMonitor
}

// NewMockEventProcessorMonitor creates a new mock instance
// nolint
func NewMockEventProcessorMonitor(ctrl *gomock.Controller) *MockEventProcessorMonitor {
	mock := &MockEventProcessorMonitor{ctrl: ctrl}
	mock.recorder = &MockEventProcessorMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockEventProcessorMonitor) EXPECT() *MockEventProcessorMonitorMockRecorder {
	return m.recorder
}

// SetupHandlers mocks base method
// nolint
func (m *MockEventProcessorMonitor) SetupHandlers(puHandler ProcessingUnitsHandler, syncHandler SynchronizationHandler) {
	m.ctrl.Call(m, "SetupHandlers", puHandler, syncHandler)
}

// SetupHandlers indicates an expected call of SetupHandlers
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) SetupHandlers(puHandler, syncHandler interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHandlers", reflect.TypeOf((*MockEventProcessorMonitor)(nil).SetupHandlers), puHandler, syncHandler)
}

// Start mocks base method
// nolint
func (m *MockEventProcessorMonitor) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Start))
}

// Stop mocks base method
// nolint
func (m *MockEventProcessorMonitor) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Stop))
}

// Start mocks base method
// nolint
func (m *MockEventProcessorMonitor) Start(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Start", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Start(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Start), eventInfo)
}

// Stop mocks base method
// nolint
func (m *MockEventProcessorMonitor) Stop(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Stop", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Stop(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Stop), eventInfo)
}

// Create mocks base method
// nolint
func (m *MockEventProcessorMonitor) Create(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Create", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Create(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Create), eventInfo)
}

// Destroy mocks base method
// nolint
func (m *MockEventProcessorMonitor) Destroy(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Destroy", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Destroy(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Destroy), eventInfo)
}

// Pause mocks base method
// nolint
func (m *MockEventProcessorMonitor) Pause(eventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "Pause", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) Pause(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockEventProcessorMonitor)(nil).Pause), eventInfo)
}

// ReSync mocks base method
// nolint
func (m *MockEventProcessorMonitor) ReSync(EventInfo *eventinfo.EventInfo) error {
	ret := m.ctrl.Call(m, "ReSync", EventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReSync indicates an expected call of ReSync
// nolint
func (mr *MockEventProcessorMonitorMockRecorder) ReSync(EventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReSync", reflect.TypeOf((*MockEventProcessorMonitor)(nil).ReSync), EventInfo)
}

// MockProcessingUnitsHandler is a mock of ProcessingUnitsHandler interface
// nolint
type MockProcessingUnitsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingUnitsHandlerMockRecorder
}

// MockProcessingUnitsHandlerMockRecorder is the mock recorder for MockProcessingUnitsHandler
// nolint
type MockProcessingUnitsHandlerMockRecorder struct {
	mock *MockProcessingUnitsHandler
}

// NewMockProcessingUnitsHandler creates a new mock instance
// nolint
func NewMockProcessingUnitsHandler(ctrl *gomock.Controller) *MockProcessingUnitsHandler {
	mock := &MockProcessingUnitsHandler{ctrl: ctrl}
	mock.recorder = &MockProcessingUnitsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockProcessingUnitsHandler) EXPECT() *MockProcessingUnitsHandlerMockRecorder {
	return m.recorder
}

// CreatePURuntime mocks base method
// nolint
func (m *MockProcessingUnitsHandler) CreatePURuntime(contextID string, runtimeInfo *policy.PURuntime) error {
	ret := m.ctrl.Call(m, "CreatePURuntime", contextID, runtimeInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePURuntime indicates an expected call of CreatePURuntime
// nolint
func (mr *MockProcessingUnitsHandlerMockRecorder) CreatePURuntime(contextID, runtimeInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePURuntime", reflect.TypeOf((*MockProcessingUnitsHandler)(nil).CreatePURuntime), contextID, runtimeInfo)
}

// HandlePUEvent mocks base method
// nolint
func (m *MockProcessingUnitsHandler) HandlePUEvent(contextID string, event Event) error {
	ret := m.ctrl.Call(m, "HandlePUEvent", contextID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePUEvent indicates an expected call of HandlePUEvent
// nolint
func (mr *MockProcessingUnitsHandlerMockRecorder) HandlePUEvent(contextID, event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePUEvent", reflect.TypeOf((*MockProcessingUnitsHandler)(nil).HandlePUEvent), contextID, event)
}

// MockSynchronizationHandler is a mock of SynchronizationHandler interface
// nolint
type MockSynchronizationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSynchronizationHandlerMockRecorder
}

// MockSynchronizationHandlerMockRecorder is the mock recorder for MockSynchronizationHandler
// nolint
type MockSynchronizationHandlerMockRecorder struct {
	mock *MockSynchronizationHandler
}

// NewMockSynchronizationHandler creates a new mock instance
// nolint
func NewMockSynchronizationHandler(ctrl *gomock.Controller) *MockSynchronizationHandler {
	mock := &MockSynchronizationHandler{ctrl: ctrl}
	mock.recorder = &MockSynchronizationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockSynchronizationHandler) EXPECT() *MockSynchronizationHandlerMockRecorder {
	return m.recorder
}

// HandleSynchronization mocks base method
// nolint
func (m *MockSynchronizationHandler) HandleSynchronization(contextID string, state State, RuntimeReader policy.RuntimeReader, syncType SynchronizationType) error {
	ret := m.ctrl.Call(m, "HandleSynchronization", contextID, state, RuntimeReader, syncType)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSynchronization indicates an expected call of HandleSynchronization
// nolint
func (mr *MockSynchronizationHandlerMockRecorder) HandleSynchronization(contextID, state, RuntimeReader, syncType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSynchronization", reflect.TypeOf((*MockSynchronizationHandler)(nil).HandleSynchronization), contextID, state, RuntimeReader, syncType)
}

// HandleSynchronizationComplete mocks base method
// nolint
func (m *MockSynchronizationHandler) HandleSynchronizationComplete(syncType SynchronizationType) {
	m.ctrl.Call(m, "HandleSynchronizationComplete", syncType)
}

// HandleSynchronizationComplete indicates an expected call of HandleSynchronizationComplete
// nolint
func (mr *MockSynchronizationHandlerMockRecorder) HandleSynchronizationComplete(syncType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSynchronizationComplete", reflect.TypeOf((*MockSynchronizationHandler)(nil).HandleSynchronizationComplete), syncType)
}
