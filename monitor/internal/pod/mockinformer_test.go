// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/controller-runtime/pkg/cache (interfaces: Informer)

// Package podmonitor is a generated GoMock package.
package podmonitor

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cache "k8s.io/client-go/tools/cache"
)

// MockInformer is a mock of Informer interface
// nolint
type MockInformer struct {
	ctrl     *gomock.Controller
	recorder *MockInformerMockRecorder
}

// MockInformerMockRecorder is the mock recorder for MockInformer
// nolint
type MockInformerMockRecorder struct {
	mock *MockInformer
}

// NewMockInformer creates a new mock instance
// nolint
func NewMockInformer(ctrl *gomock.Controller) *MockInformer {
	mock := &MockInformer{ctrl: ctrl}
	mock.recorder = &MockInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockInformer) EXPECT() *MockInformerMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
// nolint
func (m *MockInformer) AddEventHandler(arg0 cache.ResourceEventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEventHandler", arg0)
}

// AddEventHandler indicates an expected call of AddEventHandler
// nolint
func (mr *MockInformerMockRecorder) AddEventHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockInformer)(nil).AddEventHandler), arg0)
}

// AddEventHandlerWithResyncPeriod mocks base method
// nolint
func (m *MockInformer) AddEventHandlerWithResyncPeriod(arg0 cache.ResourceEventHandler, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEventHandlerWithResyncPeriod", arg0, arg1)
}

// AddEventHandlerWithResyncPeriod indicates an expected call of AddEventHandlerWithResyncPeriod
// nolint
func (mr *MockInformerMockRecorder) AddEventHandlerWithResyncPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandlerWithResyncPeriod", reflect.TypeOf((*MockInformer)(nil).AddEventHandlerWithResyncPeriod), arg0, arg1)
}

// AddIndexers mocks base method
// nolint
func (m *MockInformer) AddIndexers(arg0 cache.Indexers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndexers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndexers indicates an expected call of AddIndexers
// nolint
func (mr *MockInformerMockRecorder) AddIndexers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexers", reflect.TypeOf((*MockInformer)(nil).AddIndexers), arg0)
}

// HasSynced mocks base method
// nolint
func (m *MockInformer) HasSynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSynced indicates an expected call of HasSynced
// nolint
func (mr *MockInformerMockRecorder) HasSynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSynced", reflect.TypeOf((*MockInformer)(nil).HasSynced))
}
