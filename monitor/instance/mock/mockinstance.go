// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/instance/interfaces.go

// Package mockinstance is a generated GoMock package.
package mockinstance

import (
	reflect "reflect"

	processor "github.com/aporeto-inc/trireme-lib/monitor/rpc/processor"
	gomock "github.com/golang/mock/gomock"
)

// MockImplementation is a mock of Implementation interface
// nolint
type MockImplementation struct {
	ctrl     *gomock.Controller
	recorder *MockImplementationMockRecorder
}

// MockImplementationMockRecorder is the mock recorder for MockImplementation
// nolint
type MockImplementationMockRecorder struct {
	mock *MockImplementation
}

// NewMockImplementation creates a new mock instance
// nolint
func NewMockImplementation(ctrl *gomock.Controller) *MockImplementation {
	mock := &MockImplementation{ctrl: ctrl}
	mock.recorder = &MockImplementationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockImplementation) EXPECT() *MockImplementationMockRecorder {
	return m.recorder
}

// Start mocks base method
// nolint
func (m *MockImplementation) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockImplementationMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockImplementation)(nil).Start))
}

// Stop mocks base method
// nolint
func (m *MockImplementation) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockImplementationMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockImplementation)(nil).Stop))
}

// SetupConfig mocks base method
// nolint
func (m *MockImplementation) SetupConfig(registerer processor.Registerer, cfg interface{}) error {
	ret := m.ctrl.Call(m, "SetupConfig", registerer, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupConfig indicates an expected call of SetupConfig
// nolint
func (mr *MockImplementationMockRecorder) SetupConfig(registerer, cfg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupConfig", reflect.TypeOf((*MockImplementation)(nil).SetupConfig), registerer, cfg)
}

// SetupHandlers mocks base method
// nolint
func (m *MockImplementation) SetupHandlers(c *processor.Config) {
	m.ctrl.Call(m, "SetupHandlers", c)
}

// SetupHandlers indicates an expected call of SetupHandlers
// nolint
func (mr *MockImplementationMockRecorder) SetupHandlers(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHandlers", reflect.TypeOf((*MockImplementation)(nil).SetupHandlers), c)
}

// ReSync mocks base method
// nolint
func (m *MockImplementation) ReSync() error {
	ret := m.ctrl.Call(m, "ReSync")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReSync indicates an expected call of ReSync
// nolint
func (mr *MockImplementationMockRecorder) ReSync() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReSync", reflect.TypeOf((*MockImplementation)(nil).ReSync))
}
