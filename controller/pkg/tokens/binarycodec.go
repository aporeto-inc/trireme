// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package tokens

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF89592 = 1
	codecSelferCcRAW9592  = 255
	// ----- value types used ----
	codecSelferValueTypeArray9592     = 10
	codecSelferValueTypeMap9592       = 9
	codecSelferValueTypeString9592    = 6
	codecSelferValueTypeInt9592       = 2
	codecSelferValueTypeUint9592      = 3
	codecSelferValueTypeFloat9592     = 4
	codecSelferValueTypeNil9592       = 1
	codecSelferBitsize9592            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil9592 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct9592 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer9592 struct{}

func codecSelfer9592False() bool { return false }

func init() {
	if codec1978.GenVersion != 16 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 16, need " + ver + ". Re-generate file: " + file)
	}
}

func (x *BinaryJWTClaims) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9592
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [8]bool{     // should field at this index be written?
			len(x.T) != 0,         // T
			len(x.RMT) != 0,       // RMT
			len(x.LCL) != 0,       // LCL
			len(x.EK) != 0,        // EK
			x.C != "",             // C
			x.ID != "",            // ID
			x.ExpiresAt != 0,      // ExpiresAt
			len(x.SignerKey) != 0, // SignerKey
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(8)
			z.EncWriteArrayElem()
			if yyq2[0] {
				if x.T == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.T, e)
				} // end block: if x.T slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[1] {
				if x.RMT == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.RMT))
				} // end block: if x.RMT slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[2] {
				if x.LCL == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.LCL))
				} // end block: if x.LCL slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[3] {
				if x.EK == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.EK))
				} // end block: if x.EK slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[4] {
				r.EncodeString(string(x.C))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[5] {
				r.EncodeString(string(x.ID))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayElem()
			if yyq2[6] {
				r.EncodeInt(int64(x.ExpiresAt))
			} else {
				r.EncodeInt(0)
			}
			z.EncWriteArrayElem()
			if yyq2[7] {
				if x.SignerKey == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.SignerKey))
				} // end block: if x.SignerKey slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			if yyq2[0] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"T\"")
				} else {
					r.EncodeString(`T`)
				}
				z.EncWriteMapElemValue()
				if x.T == nil {
					r.EncodeNil()
				} else {
					z.F.EncSliceStringV(x.T, e)
				} // end block: if x.T slice == nil
			}
			if yyq2[1] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"RMT\"")
				} else {
					r.EncodeString(`RMT`)
				}
				z.EncWriteMapElemValue()
				if x.RMT == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.RMT))
				} // end block: if x.RMT slice == nil
			}
			if yyq2[2] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"LCL\"")
				} else {
					r.EncodeString(`LCL`)
				}
				z.EncWriteMapElemValue()
				if x.LCL == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.LCL))
				} // end block: if x.LCL slice == nil
			}
			if yyq2[3] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"EK\"")
				} else {
					r.EncodeString(`EK`)
				}
				z.EncWriteMapElemValue()
				if x.EK == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.EK))
				} // end block: if x.EK slice == nil
			}
			if yyq2[4] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"C\"")
				} else {
					r.EncodeString(`C`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.C))
			}
			if yyq2[5] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"ID\"")
				} else {
					r.EncodeString(`ID`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ID))
			}
			if yyq2[6] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"ExpiresAt\"")
				} else {
					r.EncodeString(`ExpiresAt`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.ExpiresAt))
			}
			if yyq2[7] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"SignerKey\"")
				} else {
					r.EncodeString(`SignerKey`)
				}
				z.EncWriteMapElemValue()
				if x.SignerKey == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.SignerKey))
				} // end block: if x.SignerKey slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *BinaryJWTClaims) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9592
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9592 {
		*(x) = BinaryJWTClaims{}
	} else if yyct2 == codecSelferValueTypeMap9592 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9592 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9592)
	}
}

func (x *BinaryJWTClaims) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9592
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "T":
			z.F.DecSliceStringX(&x.T, d)
		case "RMT":
			x.RMT = r.DecodeBytes(([]byte)(x.RMT), false)
		case "LCL":
			x.LCL = r.DecodeBytes(([]byte)(x.LCL), false)
		case "EK":
			x.EK = r.DecodeBytes(([]byte)(x.EK), false)
		case "C":
			x.C = (string)(string(r.DecodeStringAsBytes()))
		case "ID":
			x.ID = (string)(string(r.DecodeStringAsBytes()))
		case "ExpiresAt":
			x.ExpiresAt = (int64)(r.DecodeInt64())
		case "SignerKey":
			x.SignerKey = r.DecodeBytes(([]byte)(x.SignerKey), false)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *BinaryJWTClaims) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9592
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.T, d)
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.RMT = r.DecodeBytes(([]byte)(x.RMT), false)
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.LCL = r.DecodeBytes(([]byte)(x.LCL), false)
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.EK = r.DecodeBytes(([]byte)(x.EK), false)
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.C = (string)(string(r.DecodeStringAsBytes()))
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ID = (string)(string(r.DecodeStringAsBytes()))
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ExpiresAt = (int64)(r.DecodeInt64())
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.SignerKey = r.DecodeBytes(([]byte)(x.SignerKey), false)
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = z.DecCheckBreak()
		}
		if yyb17 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj17-1, "")
	}
}
