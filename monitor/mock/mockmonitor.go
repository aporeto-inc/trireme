// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/interfaces.go

// Package mockmonitor is a generated GoMock package.
package mockmonitor

import (
	context "context"
	reflect "reflect"

	config "github.com/aporeto-inc/trireme-lib/monitor/config"
	gomock "github.com/golang/mock/gomock"
)

// MockMonitor is a mock of Monitor interface
// nolint
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor
// nolint
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance
// nolint
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// Run mocks base method
// nolint
func (m *MockMonitor) Run(ctx context.Context) error {
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
// nolint
func (mr *MockMonitorMockRecorder) Run(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMonitor)(nil).Run), ctx)
}

// UpdateConfiguration mocks base method
// nolint
func (m *MockMonitor) UpdateConfiguration(ctx context.Context, config *config.MonitorConfig) error {
	ret := m.ctrl.Call(m, "UpdateConfiguration", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration
// nolint
func (mr *MockMonitorMockRecorder) UpdateConfiguration(ctx, config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockMonitor)(nil).UpdateConfiguration), ctx, config)
}

// Resync mocks base method
// nolint
func (m *MockMonitor) Resync(ctx context.Context) error {
	ret := m.ctrl.Call(m, "Resync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resync indicates an expected call of Resync
// nolint
func (mr *MockMonitorMockRecorder) Resync(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resync", reflect.TypeOf((*MockMonitor)(nil).Resync), ctx)
}
