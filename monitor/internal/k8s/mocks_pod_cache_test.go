// Code generated by MockGen. DO NOT EDIT.
// Source: trireme-lib/monitor/internal/k8s/pod_cache.go

// Package k8smonitor is a generated GoMock package.
package k8smonitor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	kubernetes "k8s.io/client-go/kubernetes"
	v10 "k8s.io/client-go/listers/core/v1"
	reflect "reflect"
)

// MockpodCacheInterface is a mock of podCacheInterface interface
type MockpodCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockpodCacheInterfaceMockRecorder
}

// MockpodCacheInterfaceMockRecorder is the mock recorder for MockpodCacheInterface
type MockpodCacheInterfaceMockRecorder struct {
	mock *MockpodCacheInterface
}

// NewMockpodCacheInterface creates a new mock instance
func NewMockpodCacheInterface(ctrl *gomock.Controller) *MockpodCacheInterface {
	mock := &MockpodCacheInterface{ctrl: ctrl}
	mock.recorder = &MockpodCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpodCacheInterface) EXPECT() *MockpodCacheInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockpodCacheInterface) Delete(sandboxID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", sandboxID)
}

// Delete indicates an expected call of Delete
func (mr *MockpodCacheInterfaceMockRecorder) Delete(sandboxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpodCacheInterface)(nil).Delete), sandboxID)
}

// Get mocks base method
func (m *MockpodCacheInterface) Get(sandboxID string) *v1.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", sandboxID)
	ret0, _ := ret[0].(*v1.Pod)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockpodCacheInterfaceMockRecorder) Get(sandboxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockpodCacheInterface)(nil).Get), sandboxID)
}

// Set mocks base method
func (m *MockpodCacheInterface) Set(sandboxID string, pod *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", sandboxID, pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockpodCacheInterfaceMockRecorder) Set(sandboxID, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockpodCacheInterface)(nil).Set), sandboxID, pod)
}

// FindSandboxID mocks base method
func (m *MockpodCacheInterface) FindSandboxID(name, namespace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSandboxID", name, namespace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSandboxID indicates an expected call of FindSandboxID
func (mr *MockpodCacheInterfaceMockRecorder) FindSandboxID(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSandboxID", reflect.TypeOf((*MockpodCacheInterface)(nil).FindSandboxID), name, namespace)
}

// SetupInformer mocks base method
func (m *MockpodCacheInterface) SetupInformer(ctx context.Context, kubeClient kubernetes.Interface, nodeName string, needsUpdate needsUpdateFunc) v10.PodLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupInformer", ctx, kubeClient, nodeName, needsUpdate)
	ret0, _ := ret[0].(v10.PodLister)
	return ret0
}

// SetupInformer indicates an expected call of SetupInformer
func (mr *MockpodCacheInterfaceMockRecorder) SetupInformer(ctx, kubeClient, nodeName, needsUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupInformer", reflect.TypeOf((*MockpodCacheInterface)(nil).SetupInformer), ctx, kubeClient, nodeName, needsUpdate)
}
