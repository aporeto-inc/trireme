// Code generated by MockGen. DO NOT EDIT.
// Source: utils/contextstore/interfaces.go

// Package mockcontextstore is a generated GoMock package.
package mockcontextstore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContextStore is a mock of ContextStore interface
// nolint
type MockContextStore struct {
	ctrl     *gomock.Controller
	recorder *MockContextStoreMockRecorder
}

// MockContextStoreMockRecorder is the mock recorder for MockContextStore
// nolint
type MockContextStoreMockRecorder struct {
	mock *MockContextStore
}

// NewMockContextStore creates a new mock instance
// nolint
func NewMockContextStore(ctrl *gomock.Controller) *MockContextStore {
	mock := &MockContextStore{ctrl: ctrl}
	mock.recorder = &MockContextStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockContextStore) EXPECT() *MockContextStoreMockRecorder {
	return m.recorder
}

// Store mocks base method
// nolint
func (m *MockContextStore) Store(id string, item interface{}) error {
	ret := m.ctrl.Call(m, "Store", id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
// nolint
func (mr *MockContextStoreMockRecorder) Store(id, item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockContextStore)(nil).Store), id, item)
}

// Retrieve mocks base method
// nolint
func (m *MockContextStore) Retrieve(id string, item interface{}) error {
	ret := m.ctrl.Call(m, "Retrieve", id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retrieve indicates an expected call of Retrieve
// nolint
func (mr *MockContextStoreMockRecorder) Retrieve(id, item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockContextStore)(nil).Retrieve), id, item)
}

// Remove mocks base method
// nolint
func (m *MockContextStore) Remove(id string) error {
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
// nolint
func (mr *MockContextStoreMockRecorder) Remove(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockContextStore)(nil).Remove), id)
}

// Walk mocks base method
// nolint
func (m *MockContextStore) Walk() (chan string, error) {
	ret := m.ctrl.Call(m, "Walk")
	ret0, _ := ret[0].(chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Walk indicates an expected call of Walk
// nolint
func (mr *MockContextStoreMockRecorder) Walk() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockContextStore)(nil).Walk))
}

// DestroyStore mocks base method
// nolint
func (m *MockContextStore) DestroyStore() error {
	ret := m.ctrl.Call(m, "DestroyStore")
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyStore indicates an expected call of DestroyStore
// nolint
func (mr *MockContextStoreMockRecorder) DestroyStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyStore", reflect.TypeOf((*MockContextStore)(nil).DestroyStore))
}
