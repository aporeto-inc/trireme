// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pkg/remoteenforcer/internal/debugclient/interfaces.go

// Package mockdebugclient is a generated GoMock package.
package mockdebugclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDebugClient is a mock of DebugClient interface
// nolint
type MockDebugClient struct {
	ctrl     *gomock.Controller
	recorder *MockDebugClientMockRecorder
}

// MockDebugClientMockRecorder is the mock recorder for MockDebugClient
// nolint
type MockDebugClientMockRecorder struct {
	mock *MockDebugClient
}

// NewMockDebugClient creates a new mock instance
// nolint
func NewMockDebugClient(ctrl *gomock.Controller) *MockDebugClient {
	mock := &MockDebugClient{ctrl: ctrl}
	mock.recorder = &MockDebugClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockDebugClient) EXPECT() *MockDebugClientMockRecorder {
	return m.recorder
}

// Run mocks base method
// nolint
func (m *MockDebugClient) Run(ctx context.Context) error {
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
// nolint
func (mr *MockDebugClientMockRecorder) Run(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDebugClient)(nil).Run), ctx)
}
