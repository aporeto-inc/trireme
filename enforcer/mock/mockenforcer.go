// Code generated by MockGen. DO NOT EDIT.
// Source: enforcer/interfaces.go

// Package mockenforcer is a generated GoMock package.
package mockenforcer

import (
	reflect "reflect"

	enforcer "github.com/aporeto-inc/trireme-lib/enforcer"
	fqconfig "github.com/aporeto-inc/trireme-lib/enforcer/utils/fqconfig"
	packet "github.com/aporeto-inc/trireme-lib/enforcer/utils/packet"
	secrets "github.com/aporeto-inc/trireme-lib/enforcer/utils/secrets"
	tokens "github.com/aporeto-inc/trireme-lib/enforcer/utils/tokens"
	policy "github.com/aporeto-inc/trireme-lib/policy"
	gomock "github.com/golang/mock/gomock"
)

// MockPolicyEnforcer is a mock of PolicyEnforcer interface
// nolint
type MockPolicyEnforcer struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyEnforcerMockRecorder
}

// MockPolicyEnforcerMockRecorder is the mock recorder for MockPolicyEnforcer
// nolint
type MockPolicyEnforcerMockRecorder struct {
	mock *MockPolicyEnforcer
}

// NewMockPolicyEnforcer creates a new mock instance
// nolint
func NewMockPolicyEnforcer(ctrl *gomock.Controller) *MockPolicyEnforcer {
	mock := &MockPolicyEnforcer{ctrl: ctrl}
	mock.recorder = &MockPolicyEnforcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockPolicyEnforcer) EXPECT() *MockPolicyEnforcerMockRecorder {
	return m.recorder
}

// Enforce mocks base method
// nolint
func (m *MockPolicyEnforcer) Enforce(contextID string, puInfo *policy.PUInfo) error {
	ret := m.ctrl.Call(m, "Enforce", contextID, puInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enforce indicates an expected call of Enforce
// nolint
func (mr *MockPolicyEnforcerMockRecorder) Enforce(contextID, puInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enforce", reflect.TypeOf((*MockPolicyEnforcer)(nil).Enforce), contextID, puInfo)
}

// Unenforce mocks base method
// nolint
func (m *MockPolicyEnforcer) Unenforce(contextID string) error {
	ret := m.ctrl.Call(m, "Unenforce", contextID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unenforce indicates an expected call of Unenforce
// nolint
func (mr *MockPolicyEnforcerMockRecorder) Unenforce(contextID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unenforce", reflect.TypeOf((*MockPolicyEnforcer)(nil).Unenforce), contextID)
}

// GetFilterQueue mocks base method
// nolint
func (m *MockPolicyEnforcer) GetFilterQueue() *fqconfig.FilterQueue {
	ret := m.ctrl.Call(m, "GetFilterQueue")
	ret0, _ := ret[0].(*fqconfig.FilterQueue)
	return ret0
}

// GetFilterQueue indicates an expected call of GetFilterQueue
// nolint
func (mr *MockPolicyEnforcerMockRecorder) GetFilterQueue() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterQueue", reflect.TypeOf((*MockPolicyEnforcer)(nil).GetFilterQueue))
}

// Start mocks base method
// nolint
func (m *MockPolicyEnforcer) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockPolicyEnforcerMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPolicyEnforcer)(nil).Start))
}

// Stop mocks base method
// nolint
func (m *MockPolicyEnforcer) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockPolicyEnforcerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPolicyEnforcer)(nil).Stop))
}

// UpdateSecrets mocks base method
// nolint
func (m *MockPolicyEnforcer) UpdateSecrets(token secrets.Secrets) error {
	ret := m.ctrl.Call(m, "UpdateSecrets", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecrets indicates an expected call of UpdateSecrets
// nolint
func (mr *MockPolicyEnforcerMockRecorder) UpdateSecrets(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecrets", reflect.TypeOf((*MockPolicyEnforcer)(nil).UpdateSecrets), token)
}

// MockPublicKeyAdder is a mock of PublicKeyAdder interface
// nolint
type MockPublicKeyAdder struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyAdderMockRecorder
}

// MockPublicKeyAdderMockRecorder is the mock recorder for MockPublicKeyAdder
// nolint
type MockPublicKeyAdderMockRecorder struct {
	mock *MockPublicKeyAdder
}

// NewMockPublicKeyAdder creates a new mock instance
// nolint
func NewMockPublicKeyAdder(ctrl *gomock.Controller) *MockPublicKeyAdder {
	mock := &MockPublicKeyAdder{ctrl: ctrl}
	mock.recorder = &MockPublicKeyAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockPublicKeyAdder) EXPECT() *MockPublicKeyAdderMockRecorder {
	return m.recorder
}

// PublicKeyAdd mocks base method
// nolint
func (m *MockPublicKeyAdder) PublicKeyAdd(host string, cert []byte) error {
	ret := m.ctrl.Call(m, "PublicKeyAdd", host, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublicKeyAdd indicates an expected call of PublicKeyAdd
// nolint
func (mr *MockPublicKeyAdderMockRecorder) PublicKeyAdd(host, cert interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyAdd", reflect.TypeOf((*MockPublicKeyAdder)(nil).PublicKeyAdd), host, cert)
}

// MockPacketProcessor is a mock of PacketProcessor interface
// nolint
type MockPacketProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockPacketProcessorMockRecorder
}

// MockPacketProcessorMockRecorder is the mock recorder for MockPacketProcessor
// nolint
type MockPacketProcessorMockRecorder struct {
	mock *MockPacketProcessor
}

// NewMockPacketProcessor creates a new mock instance
// nolint
func NewMockPacketProcessor(ctrl *gomock.Controller) *MockPacketProcessor {
	mock := &MockPacketProcessor{ctrl: ctrl}
	mock.recorder = &MockPacketProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockPacketProcessor) EXPECT() *MockPacketProcessorMockRecorder {
	return m.recorder
}

// Initialize mocks base method
// nolint
func (m *MockPacketProcessor) Initialize(s secrets.Secrets, fq *fqconfig.FilterQueue) {
	m.ctrl.Call(m, "Initialize", s, fq)
}

// Initialize indicates an expected call of Initialize
// nolint
func (mr *MockPacketProcessorMockRecorder) Initialize(s, fq interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPacketProcessor)(nil).Initialize), s, fq)
}

// PreProcessTCPAppPacket mocks base method
// nolint
func (m *MockPacketProcessor) PreProcessTCPAppPacket(p *packet.Packet, context *enforcer.PUContext, conn *enforcer.TCPConnection) bool {
	ret := m.ctrl.Call(m, "PreProcessTCPAppPacket", p, context, conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PreProcessTCPAppPacket indicates an expected call of PreProcessTCPAppPacket
// nolint
func (mr *MockPacketProcessorMockRecorder) PreProcessTCPAppPacket(p, context, conn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreProcessTCPAppPacket", reflect.TypeOf((*MockPacketProcessor)(nil).PreProcessTCPAppPacket), p, context, conn)
}

// PostProcessTCPAppPacket mocks base method
// nolint
func (m *MockPacketProcessor) PostProcessTCPAppPacket(p *packet.Packet, action interface{}, context *enforcer.PUContext, conn *enforcer.TCPConnection) bool {
	ret := m.ctrl.Call(m, "PostProcessTCPAppPacket", p, action, context, conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PostProcessTCPAppPacket indicates an expected call of PostProcessTCPAppPacket
// nolint
func (mr *MockPacketProcessorMockRecorder) PostProcessTCPAppPacket(p, action, context, conn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProcessTCPAppPacket", reflect.TypeOf((*MockPacketProcessor)(nil).PostProcessTCPAppPacket), p, action, context, conn)
}

// PreProcessTCPNetPacket mocks base method
// nolint
func (m *MockPacketProcessor) PreProcessTCPNetPacket(p *packet.Packet, context *enforcer.PUContext, conn *enforcer.TCPConnection) bool {
	ret := m.ctrl.Call(m, "PreProcessTCPNetPacket", p, context, conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PreProcessTCPNetPacket indicates an expected call of PreProcessTCPNetPacket
// nolint
func (mr *MockPacketProcessorMockRecorder) PreProcessTCPNetPacket(p, context, conn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreProcessTCPNetPacket", reflect.TypeOf((*MockPacketProcessor)(nil).PreProcessTCPNetPacket), p, context, conn)
}

// PostProcessTCPNetPacket mocks base method
// nolint
func (m *MockPacketProcessor) PostProcessTCPNetPacket(p *packet.Packet, action interface{}, claims *tokens.ConnectionClaims, context *enforcer.PUContext, conn *enforcer.TCPConnection) bool {
	ret := m.ctrl.Call(m, "PostProcessTCPNetPacket", p, action, claims, context, conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PostProcessTCPNetPacket indicates an expected call of PostProcessTCPNetPacket
// nolint
func (mr *MockPacketProcessorMockRecorder) PostProcessTCPNetPacket(p, action, claims, context, conn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProcessTCPNetPacket", reflect.TypeOf((*MockPacketProcessor)(nil).PostProcessTCPNetPacket), p, action, claims, context, conn)
}
