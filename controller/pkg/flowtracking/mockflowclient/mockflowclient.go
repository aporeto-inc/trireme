// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pkg/flowtracking/interfaces.go

// Package mockflowclient is a generated GoMock package.
package mockflowclient

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlowClient is a mock of FlowClient interface
// nolint
type MockFlowClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlowClientMockRecorder
}

// MockFlowClientMockRecorder is the mock recorder for MockFlowClient
// nolint
type MockFlowClientMockRecorder struct {
	mock *MockFlowClient
}

// NewMockFlowClient creates a new mock instance
// nolint
func NewMockFlowClient(ctrl *gomock.Controller) *MockFlowClient {
	mock := &MockFlowClient{ctrl: ctrl}
	mock.recorder = &MockFlowClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockFlowClient) EXPECT() *MockFlowClientMockRecorder {
	return m.recorder
}

// Close mocks base method
// nolint
func (m *MockFlowClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
// nolint
func (mr *MockFlowClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFlowClient)(nil).Close))
}

// UpdateMark mocks base method
// nolint
func (m *MockFlowClient) UpdateMark(ipSrc, ipDst net.IP, protonum uint8, srcport, dstport uint16, newmark uint32, network bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMark", ipSrc, ipDst, protonum, srcport, dstport, newmark, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMark indicates an expected call of UpdateMark
// nolint
func (mr *MockFlowClientMockRecorder) UpdateMark(ipSrc, ipDst, protonum, srcport, dstport, newmark, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMark", reflect.TypeOf((*MockFlowClient)(nil).UpdateMark), ipSrc, ipDst, protonum, srcport, dstport, newmark, network)
}

// GetOriginalDest mocks base method
// nolint
func (m *MockFlowClient) GetOriginalDest(ipSrc, ipDst net.IP, srcport, dstport uint16, protonum uint8) (net.IP, uint16, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalDest", ipSrc, ipDst, srcport, dstport, protonum)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(uint16)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOriginalDest indicates an expected call of GetOriginalDest
// nolint
func (mr *MockFlowClientMockRecorder) GetOriginalDest(ipSrc, ipDst, srcport, dstport, protonum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalDest", reflect.TypeOf((*MockFlowClient)(nil).GetOriginalDest), ipSrc, ipDst, srcport, dstport, protonum)
}

// UpdateNetworkFlowMark mocks base method
// nolint
func (m *MockFlowClient) UpdateNetworkFlowMark(ipSrc, ipDst net.IP, protonum uint8, srcport, dstport uint16, newmark uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkFlowMark", ipSrc, ipDst, protonum, srcport, dstport, newmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkFlowMark indicates an expected call of UpdateNetworkFlowMark
// nolint
func (mr *MockFlowClientMockRecorder) UpdateNetworkFlowMark(ipSrc, ipDst, protonum, srcport, dstport, newmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkFlowMark", reflect.TypeOf((*MockFlowClient)(nil).UpdateNetworkFlowMark), ipSrc, ipDst, protonum, srcport, dstport, newmark)
}

// UpdateApplicationFlowMark mocks base method
// nolint
func (m *MockFlowClient) UpdateApplicationFlowMark(ipSrc, ipDst net.IP, protonum uint8, srcport, dstport uint16, newmark uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationFlowMark", ipSrc, ipDst, protonum, srcport, dstport, newmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationFlowMark indicates an expected call of UpdateApplicationFlowMark
// nolint
func (mr *MockFlowClientMockRecorder) UpdateApplicationFlowMark(ipSrc, ipDst, protonum, srcport, dstport, newmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationFlowMark", reflect.TypeOf((*MockFlowClient)(nil).UpdateApplicationFlowMark), ipSrc, ipDst, protonum, srcport, dstport, newmark)
}
