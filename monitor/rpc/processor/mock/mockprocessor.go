// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/rpc/processor/interfaces.go

// Package mockprocessor is a generated GoMock package.
package mockprocessor

import (
	reflect "reflect"

	common "github.com/aporeto-inc/trireme-lib/common"
	gomock "github.com/golang/mock/gomock"
)

// MockProcessor is a mock of Processor interface
// nolint
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
// nolint
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
// nolint
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Start mocks base method
// nolint
func (m *MockProcessor) Start(eventInfo *common.EventInfo) error {
	ret := m.ctrl.Call(m, "Start", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
// nolint
func (mr *MockProcessorMockRecorder) Start(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcessor)(nil).Start), eventInfo)
}

// Stop mocks base method
// nolint
func (m *MockProcessor) Stop(eventInfo *common.EventInfo) error {
	ret := m.ctrl.Call(m, "Stop", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
// nolint
func (mr *MockProcessorMockRecorder) Stop(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProcessor)(nil).Stop), eventInfo)
}

// Create mocks base method
// nolint
func (m *MockProcessor) Create(eventInfo *common.EventInfo) error {
	ret := m.ctrl.Call(m, "Create", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
// nolint
func (mr *MockProcessorMockRecorder) Create(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProcessor)(nil).Create), eventInfo)
}

// Destroy mocks base method
// nolint
func (m *MockProcessor) Destroy(eventInfo *common.EventInfo) error {
	ret := m.ctrl.Call(m, "Destroy", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
// nolint
func (mr *MockProcessorMockRecorder) Destroy(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProcessor)(nil).Destroy), eventInfo)
}

// Pause mocks base method
// nolint
func (m *MockProcessor) Pause(eventInfo *common.EventInfo) error {
	ret := m.ctrl.Call(m, "Pause", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
// nolint
func (mr *MockProcessorMockRecorder) Pause(eventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockProcessor)(nil).Pause), eventInfo)
}

// ReSync mocks base method
// nolint
func (m *MockProcessor) ReSync(EventInfo *common.EventInfo) error {
	ret := m.ctrl.Call(m, "ReSync", EventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReSync indicates an expected call of ReSync
// nolint
func (mr *MockProcessorMockRecorder) ReSync(EventInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReSync", reflect.TypeOf((*MockProcessor)(nil).ReSync), EventInfo)
}
