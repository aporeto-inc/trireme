// Code generated by MockGen. DO NOT EDIT.
// Source: go.aporeto.io/enforcerd/trireme-lib/monitor/external (interfaces: ReceiveEvents,ReceiverRegistration)

// Package mockexternal is a generated GoMock package.
package mockexternal

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "go.aporeto.io/enforcerd/trireme-lib/common"
	external "go.aporeto.io/enforcerd/trireme-lib/monitor/external"
	reflect "reflect"
)

// MockReceiveEvents is a mock of ReceiveEvents interface
type MockReceiveEvents struct {
	ctrl     *gomock.Controller
	recorder *MockReceiveEventsMockRecorder
}

// MockReceiveEventsMockRecorder is the mock recorder for MockReceiveEvents
type MockReceiveEventsMockRecorder struct {
	mock *MockReceiveEvents
}

// NewMockReceiveEvents creates a new mock instance
func NewMockReceiveEvents(ctrl *gomock.Controller) *MockReceiveEvents {
	mock := &MockReceiveEvents{ctrl: ctrl}
	mock.recorder = &MockReceiveEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceiveEvents) EXPECT() *MockReceiveEventsMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MockReceiveEvents) Event(arg0 context.Context, arg1 common.Event, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MockReceiveEventsMockRecorder) Event(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockReceiveEvents)(nil).Event), arg0, arg1, arg2)
}

// SenderReady mocks base method
func (m *MockReceiveEvents) SenderReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SenderReady")
}

// SenderReady indicates an expected call of SenderReady
func (mr *MockReceiveEventsMockRecorder) SenderReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderReady", reflect.TypeOf((*MockReceiveEvents)(nil).SenderReady))
}

// MockReceiverRegistration is a mock of ReceiverRegistration interface
type MockReceiverRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverRegistrationMockRecorder
}

// MockReceiverRegistrationMockRecorder is the mock recorder for MockReceiverRegistration
type MockReceiverRegistrationMockRecorder struct {
	mock *MockReceiverRegistration
}

// NewMockReceiverRegistration creates a new mock instance
func NewMockReceiverRegistration(ctrl *gomock.Controller) *MockReceiverRegistration {
	mock := &MockReceiverRegistration{ctrl: ctrl}
	mock.recorder = &MockReceiverRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceiverRegistration) EXPECT() *MockReceiverRegistrationMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockReceiverRegistration) Register(arg0 string, arg1 external.ReceiveEvents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockReceiverRegistrationMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockReceiverRegistration)(nil).Register), arg0, arg1)
}

// SenderName mocks base method
func (m *MockReceiverRegistration) SenderName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SenderName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SenderName indicates an expected call of SenderName
func (mr *MockReceiverRegistrationMockRecorder) SenderName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderName", reflect.TypeOf((*MockReceiverRegistration)(nil).SenderName))
}
