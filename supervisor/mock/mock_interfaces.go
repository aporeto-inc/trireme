// Automatically generated by MockGen. DO NOT EDIT!
// Source: supervisor/interfaces.go

package mockinterfaces

import (
	gomock "github.com/aporeto-inc/mock/gomock"
	policy "github.com/aporeto-inc/trireme/policy"
)

// Mock of Supervisor interface
type MockSupervisor struct {
	ctrl     *gomock.Controller
	recorder *_MockSupervisorRecorder
}

// Recorder for MockSupervisor (not exported)
type _MockSupervisorRecorder struct {
	mock *MockSupervisor
}

func NewMockSupervisor(ctrl *gomock.Controller) *MockSupervisor {
	mock := &MockSupervisor{ctrl: ctrl}
	mock.recorder = &_MockSupervisorRecorder{mock}
	return mock
}

func (_m *MockSupervisor) EXPECT() *_MockSupervisorRecorder {
	return _m.recorder
}

func (_m *MockSupervisor) Supervise(contextID string, puInfo *policy.PUInfo) error {
	ret := _m.ctrl.Call(_m, "Supervise", contextID, puInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSupervisorRecorder) Supervise(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Supervise", arg0, arg1)
}

func (_m *MockSupervisor) Unsupervise(contextID string) error {
	ret := _m.ctrl.Call(_m, "Unsupervise", contextID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSupervisorRecorder) Unsupervise(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unsupervise", arg0)
}

func (_m *MockSupervisor) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSupervisorRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockSupervisor) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSupervisorRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

// Mock of Excluder interface
type MockExcluder struct {
	ctrl     *gomock.Controller
	recorder *_MockExcluderRecorder
}

// Recorder for MockExcluder (not exported)
type _MockExcluderRecorder struct {
	mock *MockExcluder
}

func NewMockExcluder(ctrl *gomock.Controller) *MockExcluder {
	mock := &MockExcluder{ctrl: ctrl}
	mock.recorder = &_MockExcluderRecorder{mock}
	return mock
}

func (_m *MockExcluder) EXPECT() *_MockExcluderRecorder {
	return _m.recorder
}

func (_m *MockExcluder) AddExcludedIP(ip string) error {
	ret := _m.ctrl.Call(_m, "AddExcludedIP", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockExcluderRecorder) AddExcludedIP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddExcludedIP", arg0)
}

func (_m *MockExcluder) RemoveExcludedIP(ip string) error {
	ret := _m.ctrl.Call(_m, "RemoveExcludedIP", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockExcluderRecorder) RemoveExcludedIP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveExcludedIP", arg0)
}
