// Automatically generated by MockGen. DO NOT EDIT!
// Source: internal/processmon/interfaces.go

package mockprocessmon

import (
	gomock "github.com/aporeto-inc/mock/gomock"
	rpcwrapper "github.com/aporeto-inc/trireme-lib/enforcer/utils/rpcwrapper"
)

// Mock of ProcessManager interface
// nolint
type MockProcessManager struct {
	ctrl     *gomock.Controller
	recorder *_MockProcessManagerRecorder
}

// Recorder for MockProcessManager (not exported)
// nolint
type _MockProcessManagerRecorder struct {
	mock *MockProcessManager
}

// nolint
func NewMockProcessManager(ctrl *gomock.Controller) *MockProcessManager {
	mock := &MockProcessManager{ctrl: ctrl}
	mock.recorder = &_MockProcessManagerRecorder{mock}
	return mock
}

// nolint
func (_m *MockProcessManager) EXPECT() *_MockProcessManagerRecorder {
	return _m.recorder
}

// nolint
func (_m *MockProcessManager) KillProcess(contextID string) {
	_m.ctrl.Call(_m, "KillProcess", contextID)
}

// nolint
func (_mr *_MockProcessManagerRecorder) KillProcess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KillProcess", arg0)
}

// nolint
func (_m *MockProcessManager) LaunchProcess(contextID string, refPid int, refNsPath string, rpchdl rpcwrapper.RPCClient, arg string, statssecret string, procMountPoint string) error {
	ret := _m.ctrl.Call(_m, "LaunchProcess", contextID, refPid, refNsPath, rpchdl, arg, statssecret, procMountPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// nolint
func (_mr *_MockProcessManagerRecorder) LaunchProcess(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LaunchProcess", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// nolint
func (_m *MockProcessManager) SetupLogAndProcessArgs(logToConsole bool, cmdArgs []string) {
	_m.ctrl.Call(_m, "SetupLogAndProcessArgs", logToConsole, cmdArgs)
}

// nolint
func (_mr *_MockProcessManagerRecorder) SetupLogAndProcessArgs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetupLogAndProcessArgs", arg0, arg1)
}
