// Code generated by MockGen. DO NOT EDIT.
// Source: trireme-lib/monitor/internal/k8s/runtime_cache.go

// Package k8smonitor is a generated GoMock package.
package k8smonitor

import (
	gomock "github.com/golang/mock/gomock"
	policy "go.aporeto.io/enforcerd/trireme-lib/policy"
	reflect "reflect"
)

// MockruntimeCacheInterface is a mock of runtimeCacheInterface interface
type MockruntimeCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockruntimeCacheInterfaceMockRecorder
}

// MockruntimeCacheInterfaceMockRecorder is the mock recorder for MockruntimeCacheInterface
type MockruntimeCacheInterfaceMockRecorder struct {
	mock *MockruntimeCacheInterface
}

// NewMockruntimeCacheInterface creates a new mock instance
func NewMockruntimeCacheInterface(ctrl *gomock.Controller) *MockruntimeCacheInterface {
	mock := &MockruntimeCacheInterface{ctrl: ctrl}
	mock.recorder = &MockruntimeCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockruntimeCacheInterface) EXPECT() *MockruntimeCacheInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockruntimeCacheInterface) Delete(sandboxID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", sandboxID)
}

// Delete indicates an expected call of Delete
func (mr *MockruntimeCacheInterfaceMockRecorder) Delete(sandboxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockruntimeCacheInterface)(nil).Delete), sandboxID)
}

// Get mocks base method
func (m *MockruntimeCacheInterface) Get(sandboxID string) policy.RuntimeReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", sandboxID)
	ret0, _ := ret[0].(policy.RuntimeReader)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockruntimeCacheInterfaceMockRecorder) Get(sandboxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockruntimeCacheInterface)(nil).Get), sandboxID)
}

// Set mocks base method
func (m *MockruntimeCacheInterface) Set(sandboxID string, runtime policy.RuntimeReader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", sandboxID, runtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockruntimeCacheInterfaceMockRecorder) Set(sandboxID, runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockruntimeCacheInterface)(nil).Set), sandboxID, runtime)
}
