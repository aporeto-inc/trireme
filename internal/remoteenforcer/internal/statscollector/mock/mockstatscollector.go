// Code generated by MockGen. DO NOT EDIT.
// Source: internal/remoteenforcer/internal/statscollector/interfaces.go

// Package mockstatscollector is a generated GoMock package.
package mockstatscollector

import (
	collector "github.com/aporeto-inc/trireme/collector"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollectorReader is a mock of CollectorReader interface
type MockCollectorReader struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorReaderMockRecorder
}

// MockCollectorReaderMockRecorder is the mock recorder for MockCollectorReader
type MockCollectorReaderMockRecorder struct {
	mock *MockCollectorReader
}

// NewMockCollectorReader creates a new mock instance
func NewMockCollectorReader(ctrl *gomock.Controller) *MockCollectorReader {
	mock := &MockCollectorReader{ctrl: ctrl}
	mock.recorder = &MockCollectorReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectorReader) EXPECT() *MockCollectorReaderMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockCollectorReader) Count() int {
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockCollectorReaderMockRecorder) Count() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCollectorReader)(nil).Count))
}

// GetAllRecords mocks base method
func (m *MockCollectorReader) GetAllRecords() map[string]*collector.FlowRecord {
	ret := m.ctrl.Call(m, "GetAllRecords")
	ret0, _ := ret[0].(map[string]*collector.FlowRecord)
	return ret0
}

// GetAllRecords indicates an expected call of GetAllRecords
func (mr *MockCollectorReaderMockRecorder) GetAllRecords() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockCollectorReader)(nil).GetAllRecords))
}

// MockCollector is a mock of Collector interface
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
}

// MockCollectorMockRecorder is the mock recorder for MockCollector
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockCollector) Count() int {
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockCollectorMockRecorder) Count() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCollector)(nil).Count))
}

// GetAllRecords mocks base method
func (m *MockCollector) GetAllRecords() map[string]*collector.FlowRecord {
	ret := m.ctrl.Call(m, "GetAllRecords")
	ret0, _ := ret[0].(map[string]*collector.FlowRecord)
	return ret0
}

// GetAllRecords indicates an expected call of GetAllRecords
func (mr *MockCollectorMockRecorder) GetAllRecords() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockCollector)(nil).GetAllRecords))
}

// CollectFlowEvent mocks base method
func (m *MockCollector) CollectFlowEvent(record *collector.FlowRecord) {
	m.ctrl.Call(m, "CollectFlowEvent", record)
}

// CollectFlowEvent indicates an expected call of CollectFlowEvent
func (mr *MockCollectorMockRecorder) CollectFlowEvent(record interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectFlowEvent", reflect.TypeOf((*MockCollector)(nil).CollectFlowEvent), record)
}

// CollectContainerEvent mocks base method
func (m *MockCollector) CollectContainerEvent(record *collector.ContainerRecord) {
	m.ctrl.Call(m, "CollectContainerEvent", record)
}

// CollectContainerEvent indicates an expected call of CollectContainerEvent
func (mr *MockCollectorMockRecorder) CollectContainerEvent(record interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectContainerEvent", reflect.TypeOf((*MockCollector)(nil).CollectContainerEvent), record)
}
