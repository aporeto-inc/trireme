// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pkg/tokens/tokens.go

// Package mocktokens is a generated GoMock package.
package mocktokens

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	claimsheader "go.aporeto.io/trireme-lib/controller/pkg/claimsheader"
	secrets "go.aporeto.io/trireme-lib/controller/pkg/secrets"
	tokens "go.aporeto.io/trireme-lib/controller/pkg/tokens"
)

// MockTokenEngine is a mock of TokenEngine interface
// nolint
type MockTokenEngine struct {
	ctrl     *gomock.Controller
	recorder *MockTokenEngineMockRecorder
}

// MockTokenEngineMockRecorder is the mock recorder for MockTokenEngine
// nolint
type MockTokenEngineMockRecorder struct {
	mock *MockTokenEngine
}

// NewMockTokenEngine creates a new mock instance
// nolint
func NewMockTokenEngine(ctrl *gomock.Controller) *MockTokenEngine {
	mock := &MockTokenEngine{ctrl: ctrl}
	mock.recorder = &MockTokenEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockTokenEngine) EXPECT() *MockTokenEngineMockRecorder {
	return m.recorder
}

// CreateAndSign mocks base method
// nolint
func (m *MockTokenEngine) CreateAndSign(isAck bool, claims *tokens.ConnectionClaims, nonce []byte, claimsHeader *claimsheader.ClaimsHeader, secrets secrets.Secrets) ([]byte, error) {
	ret := m.ctrl.Call(m, "CreateAndSign", isAck, claims, nonce, claimsHeader, secrets)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndSign indicates an expected call of CreateAndSign
// nolint
func (mr *MockTokenEngineMockRecorder) CreateAndSign(isAck, claims, nonce, claimsHeader, secrets interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndSign", reflect.TypeOf((*MockTokenEngine)(nil).CreateAndSign), isAck, claims, nonce, claimsHeader, secrets)
}

// Decode mocks base method
// nolint
func (m *MockTokenEngine) Decode(isAck bool, data []byte, previousCert interface{}, secrets secrets.Secrets) (*tokens.ConnectionClaims, []byte, interface{}, error) {
	ret := m.ctrl.Call(m, "Decode", isAck, data, previousCert, secrets)
	ret0, _ := ret[0].(*tokens.ConnectionClaims)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(interface{})
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Decode indicates an expected call of Decode
// nolint
func (mr *MockTokenEngineMockRecorder) Decode(isAck, data, previousCert, secrets interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockTokenEngine)(nil).Decode), isAck, data, previousCert, secrets)
}

// Randomize mocks base method
// nolint
func (m *MockTokenEngine) Randomize(arg0, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Randomize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Randomize indicates an expected call of Randomize
// nolint
func (mr *MockTokenEngineMockRecorder) Randomize(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Randomize", reflect.TypeOf((*MockTokenEngine)(nil).Randomize), arg0, arg1)
}
