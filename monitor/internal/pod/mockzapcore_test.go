// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/zap/zapcore (interfaces: Core)

// Package podmonitor is a generated GoMock package.
package podmonitor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
)

// MockCore is a mock of Core interface
// nolint
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore
// nolint
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance
// nolint
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// Check mocks base method
// nolint
func (m *MockCore) Check(arg0 zapcore.Entry, arg1 *zapcore.CheckedEntry) *zapcore.CheckedEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*zapcore.CheckedEntry)
	return ret0
}

// Check indicates an expected call of Check
// nolint
func (mr *MockCoreMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockCore)(nil).Check), arg0, arg1)
}

// Enabled mocks base method
// nolint
func (m *MockCore) Enabled(arg0 zapcore.Level) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled
// nolint
func (mr *MockCoreMockRecorder) Enabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockCore)(nil).Enabled), arg0)
}

// Sync mocks base method
// nolint
func (m *MockCore) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
// nolint
func (mr *MockCoreMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockCore)(nil).Sync))
}

// With mocks base method
// nolint
func (m *MockCore) With(arg0 []zapcore.Field) zapcore.Core {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0)
	ret0, _ := ret[0].(zapcore.Core)
	return ret0
}

// With indicates an expected call of With
// nolint
func (mr *MockCoreMockRecorder) With(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockCore)(nil).With), arg0)
}

// Write mocks base method
// nolint
func (m *MockCore) Write(arg0 zapcore.Entry, arg1 []zapcore.Field) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
// nolint
func (mr *MockCoreMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCore)(nil).Write), arg0, arg1)
}
