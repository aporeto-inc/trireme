// Code generated by MockGen. DO NOT EDIT.
// Source: trireme-lib/controller/pkg/secrets/secrets.go

// Package mocksecrets is a generated GoMock package.
package mocksecrets

import (
	gomock "github.com/golang/mock/gomock"
	pkiverifier "go.aporeto.io/enforcerd/trireme-lib/controller/pkg/pkiverifier"
	secrets "go.aporeto.io/enforcerd/trireme-lib/controller/pkg/secrets"
	reflect "reflect"
	time "time"
)

// MockLockedSecrets is a mock of LockedSecrets interface
type MockLockedSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockLockedSecretsMockRecorder
}

// MockLockedSecretsMockRecorder is the mock recorder for MockLockedSecrets
type MockLockedSecretsMockRecorder struct {
	mock *MockLockedSecrets
}

// NewMockLockedSecrets creates a new mock instance
func NewMockLockedSecrets(ctrl *gomock.Controller) *MockLockedSecrets {
	mock := &MockLockedSecrets{ctrl: ctrl}
	mock.recorder = &MockLockedSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLockedSecrets) EXPECT() *MockLockedSecretsMockRecorder {
	return m.recorder
}

// Secrets mocks base method
func (m *MockLockedSecrets) Secrets() (secrets.Secrets, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets")
	ret0, _ := ret[0].(secrets.Secrets)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// Secrets indicates an expected call of Secrets
func (mr *MockLockedSecretsMockRecorder) Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockLockedSecrets)(nil).Secrets))
}

// MockSecrets is a mock of Secrets interface
type MockSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsMockRecorder
}

// MockSecretsMockRecorder is the mock recorder for MockSecrets
type MockSecretsMockRecorder struct {
	mock *MockSecrets
}

// NewMockSecrets creates a new mock instance
func NewMockSecrets(ctrl *gomock.Controller) *MockSecrets {
	mock := &MockSecrets{ctrl: ctrl}
	mock.recorder = &MockSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecrets) EXPECT() *MockSecretsMockRecorder {
	return m.recorder
}

// EncodingKey mocks base method
func (m *MockSecrets) EncodingKey() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodingKey")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// EncodingKey indicates an expected call of EncodingKey
func (mr *MockSecretsMockRecorder) EncodingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodingKey", reflect.TypeOf((*MockSecrets)(nil).EncodingKey))
}

// PublicKey mocks base method
func (m *MockSecrets) PublicKey() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PublicKey indicates an expected call of PublicKey
func (mr *MockSecretsMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockSecrets)(nil).PublicKey))
}

// CertAuthority mocks base method
func (m *MockSecrets) CertAuthority() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertAuthority")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// CertAuthority indicates an expected call of CertAuthority
func (mr *MockSecretsMockRecorder) CertAuthority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertAuthority", reflect.TypeOf((*MockSecrets)(nil).CertAuthority))
}

// TransmittedKey mocks base method
func (m *MockSecrets) TransmittedKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransmittedKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// TransmittedKey indicates an expected call of TransmittedKey
func (mr *MockSecretsMockRecorder) TransmittedKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransmittedKey", reflect.TypeOf((*MockSecrets)(nil).TransmittedKey))
}

// KeyAndClaims mocks base method
func (m *MockSecrets) KeyAndClaims(pkey []byte) (interface{}, []string, time.Time, *pkiverifier.PKIControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyAndClaims", pkey)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(*pkiverifier.PKIControllerInfo)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// KeyAndClaims indicates an expected call of KeyAndClaims
func (mr *MockSecretsMockRecorder) KeyAndClaims(pkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyAndClaims", reflect.TypeOf((*MockSecrets)(nil).KeyAndClaims), pkey)
}

// AckSize mocks base method
func (m *MockSecrets) AckSize() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// AckSize indicates an expected call of AckSize
func (mr *MockSecretsMockRecorder) AckSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckSize", reflect.TypeOf((*MockSecrets)(nil).AckSize))
}

// RPCSecrets mocks base method
func (m *MockSecrets) RPCSecrets() secrets.RPCSecrets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCSecrets")
	ret0, _ := ret[0].(secrets.RPCSecrets)
	return ret0
}

// RPCSecrets indicates an expected call of RPCSecrets
func (mr *MockSecretsMockRecorder) RPCSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCSecrets", reflect.TypeOf((*MockSecrets)(nil).RPCSecrets))
}
