// Automatically generated by MockGen. DO NOT EDIT!
// Source: internal/remoteenforcer/internal/statscollector/interfaces.go

package mockstatscollector

import (
	gomock "github.com/aporeto-inc/mock/gomock"
	collector "github.com/aporeto-inc/trireme-lib/collector"
)

// Mock of CollectorReader interface
// nolint
type MockCollectorReader struct {
	ctrl     *gomock.Controller
	recorder *_MockCollectorReaderRecorder
}

// Recorder for MockCollectorReader (not exported)
// nolint
type _MockCollectorReaderRecorder struct {
	mock *MockCollectorReader
}

// nolint
func NewMockCollectorReader(ctrl *gomock.Controller) *MockCollectorReader {
	mock := &MockCollectorReader{ctrl: ctrl}
	mock.recorder = &_MockCollectorReaderRecorder{mock}
	return mock
}

// nolint
func (_m *MockCollectorReader) EXPECT() *_MockCollectorReaderRecorder {
	return _m.recorder
}

// nolint
func (_m *MockCollectorReader) Count() int {
	ret := _m.ctrl.Call(_m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// nolint
func (_mr *_MockCollectorReaderRecorder) Count() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count")
}

// nolint
func (_m *MockCollectorReader) GetAllRecords() map[string]*collector.FlowRecord {
	ret := _m.ctrl.Call(_m, "GetAllRecords")
	ret0, _ := ret[0].(map[string]*collector.FlowRecord)
	return ret0
}

// nolint
func (_mr *_MockCollectorReaderRecorder) GetAllRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllRecords")
}

// Mock of Collector interface
// nolint
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *_MockCollectorRecorder
}

// Recorder for MockCollector (not exported)
// nolint
type _MockCollectorRecorder struct {
	mock *MockCollector
}

// nolint
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &_MockCollectorRecorder{mock}
	return mock
}

// nolint
func (_m *MockCollector) EXPECT() *_MockCollectorRecorder {
	return _m.recorder
}

// nolint
func (_m *MockCollector) Count() int {
	ret := _m.ctrl.Call(_m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// nolint
func (_mr *_MockCollectorRecorder) Count() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count")
}

// nolint
func (_m *MockCollector) GetAllRecords() map[string]*collector.FlowRecord {
	ret := _m.ctrl.Call(_m, "GetAllRecords")
	ret0, _ := ret[0].(map[string]*collector.FlowRecord)
	return ret0
}

// nolint
func (_mr *_MockCollectorRecorder) GetAllRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllRecords")
}

// nolint
func (_m *MockCollector) CollectFlowEvent(record *collector.FlowRecord) {
	_m.ctrl.Call(_m, "CollectFlowEvent", record)
}

// nolint
func (_mr *_MockCollectorRecorder) CollectFlowEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CollectFlowEvent", arg0)
}

// nolint
func (_m *MockCollector) CollectContainerEvent(record *collector.ContainerRecord) {
	_m.ctrl.Call(_m, "CollectContainerEvent", record)
}

// nolint
func (_mr *_MockCollectorRecorder) CollectContainerEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CollectContainerEvent", arg0)
}
